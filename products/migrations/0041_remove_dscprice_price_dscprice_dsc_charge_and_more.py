# Generated by Django 5.2.4 on 2025-08-18 08:09

import django.core.validators
from django.db import migrations, models


def drop_price_column(apps, schema_editor):
	# Use information_schema to avoid MySQL "IF EXISTS" incompatibility
	with schema_editor.connection.cursor() as cursor:
		cursor.execute(
			"""
			SELECT COUNT(*) FROM information_schema.COLUMNS
			WHERE TABLE_SCHEMA = DATABASE()
			  AND TABLE_NAME = 'products_dscprice'
			  AND COLUMN_NAME = 'price'
			"""
		)
		count = cursor.fetchone()[0]
		if count and int(count) > 0:
			cursor.execute("ALTER TABLE products_dscprice DROP COLUMN price")


def ensure_column(cursor, column, ddl):
	cursor.execute(
		"""
		SELECT COUNT(*) FROM information_schema.COLUMNS
		WHERE TABLE_SCHEMA = DATABASE()
		  AND TABLE_NAME = 'products_dscprice'
		  AND COLUMN_NAME = %s
		""",
		[column],
	)
	count = cursor.fetchone()[0]
	if not count or int(count) == 0:
		cursor.execute(f"ALTER TABLE products_dscprice ADD COLUMN {ddl}")


def db_add_missing_columns(apps, schema_editor):
	with schema_editor.connection.cursor() as cursor:
		ensure_column(cursor, 'dsc_charge', "dsc_charge DECIMAL(10,2) NOT NULL DEFAULT 0")
		ensure_column(cursor, 'gst_percent', "gst_percent DECIMAL(5,2) NOT NULL DEFAULT 18.00")
		ensure_column(cursor, 'installation_charge', "installation_charge DECIMAL(10,2) NOT NULL DEFAULT 0")
		ensure_column(cursor, 'nett_amount', "nett_amount DECIMAL(10,2) NOT NULL DEFAULT 0")
		ensure_column(cursor, 'token_amount', "token_amount DECIMAL(10,2) NOT NULL DEFAULT 0")


class Migration(migrations.Migration):

	dependencies = [
		('products', '0040_alter_customer_email_alter_customer_mobile_dscprice'),
	]

	operations = [
		# Drop old 'price' column if it exists (MySQL-safe)
		migrations.RunPython(drop_price_column, reverse_code=migrations.RunPython.noop),
		# Ensure required columns exist in DB (idempotent) while updating state
		migrations.SeparateDatabaseAndState(
			database_operations=[migrations.RunPython(db_add_missing_columns, reverse_code=migrations.RunPython.noop)],
			state_operations=[
				migrations.AddField(
					model_name='dscprice',
					name='dsc_charge',
					field=models.DecimalField(decimal_places=2, default=0, help_text='Base DSC charge', max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
				),
				migrations.AddField(
					model_name='dscprice',
					name='gst_percent',
					field=models.DecimalField(decimal_places=2, default=18.0, max_digits=5),
				),
				migrations.AddField(
					model_name='dscprice',
					name='installation_charge',
					field=models.DecimalField(decimal_places=2, default=0, help_text='Service/installation charges', max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
				),
				migrations.AddField(
					model_name='dscprice',
					name='nett_amount',
					field=models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=10),
				),
				migrations.AddField(
					model_name='dscprice',
					name='token_amount',
					field=models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
				),
				migrations.AlterField(
					model_name='dscprice',
					name='class_type',
					field=models.CharField(db_index=True, help_text='e.g., class3, dgft, foreign class3', max_length=20),
				),
			],
		),
	]
