# Generated by Django 5.2.4 on 2025-08-22 05:41

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DscEnquiry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=255)),
                ("mobile", models.CharField(max_length=20)),
                ("address", models.TextField(blank=True, null=True)),
                ("class_type", models.CharField(max_length=20)),
                ("user_type", models.CharField(max_length=20)),
                ("cert_type", models.CharField(max_length=20)),
                ("validity", models.CharField(max_length=5)),
                ("include_token", models.BooleanField(default=False)),
                ("include_installation", models.BooleanField(default=False)),
                ("outside_india", models.BooleanField(default=False)),
                (
                    "quoted_price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
            ],
            options={
                "verbose_name": "DSC Enquiry",
                "verbose_name_plural": "DSC Enquiries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "setting_type",
                    models.CharField(
                        choices=[
                            ("razorpay", "Razorpay"),
                            ("qr_code", "UPI QR Code"),
                            ("bank_transfer", "Bank Transfer"),
                        ],
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "razorpay_key_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "razorpay_key_secret",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "payment_button_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("upi_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "qr_image",
                    models.ImageField(blank=True, null=True, upload_to="payment/qr/"),
                ),
                (
                    "account_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "account_number",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("ifsc_code", models.CharField(blank=True, max_length=20, null=True)),
                ("bank_name", models.CharField(blank=True, max_length=100, null=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Payment Setting",
                "verbose_name_plural": "Payment Settings",
            },
        ),
        migrations.CreateModel(
            name="ProductMaster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product_code",
                    models.CharField(
                        choices=[
                            ("tally", "Tally Software"),
                            ("emudhra", "E-Mudhra"),
                            ("fusiontec", "FusionTec Software"),
                            ("biz", "Business Intelligence"),
                        ],
                        help_text="Unique product identifier",
                        max_length=10,
                        unique=True,
                    ),
                ),
                (
                    "product_name",
                    models.CharField(
                        help_text="Display name of the product", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Product description", null=True
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Product logo/image",
                        null=True,
                        upload_to="products/master/",
                    ),
                ),
                (
                    "website_link",
                    models.URLField(
                        blank=True, help_text="Official product website", null=True
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this product is available"
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Order for display on website"
                    ),
                ),
                (
                    "sender_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address for sending notifications for this product",
                        max_length=255,
                        null=True,
                        verbose_name="Sender Email",
                    ),
                ),
                (
                    "app_password",
                    models.CharField(
                        blank=True,
                        help_text="App password for the sender email account",
                        max_length=255,
                        null=True,
                        verbose_name="App Password",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Master",
                "verbose_name_plural": "Product Masters",
                "ordering": ["display_order", "product_name"],
            },
        ),
        migrations.CreateModel(
            name="ProductMasterV2",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "prdt_desc",
                    models.CharField(max_length=255, verbose_name="PrdtDesc"),
                ),
            ],
            options={
                "verbose_name": "Product Master (Simple)",
                "verbose_name_plural": "Product Master (Simple)",
                "db_table": "ProductMaster",
            },
        ),
        migrations.CreateModel(
            name="ProductTypeMaster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "prdt_desc",
                    models.CharField(max_length=255, verbose_name="PrdtTDesc"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="products/types/",
                        verbose_name="Type Image",
                    ),
                ),
                (
                    "sender_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address for sending notifications for this product type",
                        max_length=255,
                        null=True,
                        verbose_name="Sender Email",
                    ),
                ),
                (
                    "app_password",
                    models.CharField(
                        blank=True,
                        help_text="App password for the sender email account",
                        max_length=255,
                        null=True,
                        verbose_name="App Password",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Type Master",
                "verbose_name_plural": "Product Type Master",
                "db_table": "ProductTypeMaster",
            },
        ),
        migrations.CreateModel(
            name="ContactSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=15)),
                ("subject", models.CharField(max_length=150)),
                ("message", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        default="new",
                        max_length=20,
                    ),
                ),
                ("admin_notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["email", "created_at"],
                        name="products_co_email_70c759_idx",
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="products_co_status_3d64ee_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "company_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("email", models.EmailField(db_index=True, max_length=254)),
                ("mobile", models.CharField(db_index=True, max_length=20)),
                ("has_gst", models.BooleanField(default=True)),
                (
                    "gst_number",
                    models.CharField(
                        blank=True, db_index=True, max_length=50, null=True
                    ),
                ),
                ("address", models.TextField(blank=True, null=True)),
                ("state", models.CharField(blank=True, max_length=100, null=True)),
                ("district", models.CharField(blank=True, max_length=100, null=True)),
                ("pincode", models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["email"], name="products_cu_email_3d69ae_idx"),
                    models.Index(
                        fields=["mobile"], name="products_cu_mobile_f47170_idx"
                    ),
                    models.Index(
                        fields=["gst_number"], name="products_cu_gst_num_9b7dbd_idx"
                    ),
                    models.Index(
                        fields=["state", "district"],
                        name="products_cu_state_081efb_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DscPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_type",
                    models.CharField(
                        db_index=True,
                        help_text="e.g., class3, dgft, foreign class3",
                        max_length=20,
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("individual", "Individual"),
                            ("organization", "Organization"),
                        ],
                        db_index=True,
                        max_length=12,
                    ),
                ),
                (
                    "cert_type",
                    models.CharField(
                        choices=[
                            ("signature", "Signature"),
                            ("encryption", "Encryption"),
                            ("both", "Both"),
                        ],
                        db_index=True,
                        max_length=12,
                    ),
                ),
                (
                    "validity",
                    models.CharField(
                        choices=[
                            ("1y", "1 Year"),
                            ("2y", "2 Years"),
                            ("3y", "3 Years"),
                        ],
                        db_index=True,
                        max_length=2,
                    ),
                ),
                (
                    "dsc_charge",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Base DSC charge",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "token_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "installation_charge",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Service/installation charges",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "gst_percent",
                    models.DecimalField(decimal_places=2, default=18.0, max_digits=5),
                ),
                (
                    "outside_india_surcharge",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "nett_amount",
                    models.DecimalField(
                        decimal_places=2, default=0, editable=False, max_digits=10
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "DSC Price",
                "verbose_name_plural": "DSC Prices",
                "unique_together": {
                    ("class_type", "user_type", "cert_type", "validity")
                },
            },
        ),
        migrations.CreateModel(
            name="ProductSubMaster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "subprdt_desc",
                    models.CharField(max_length=255, verbose_name="SubPrdtDesc"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_products",
                        to="products.productmasterv2",
                        verbose_name="PrdtId",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Sub Master",
                "verbose_name_plural": "Product Sub Master",
                "db_table": "ProductSubMaster",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ProductType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type_code",
                    models.CharField(
                        help_text="Unique type identifier within the product",
                        max_length=50,
                    ),
                ),
                (
                    "type_name",
                    models.CharField(
                        help_text="Name of the product type", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Type description", null=True
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this type is available"
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Order for display"
                    ),
                ),
                (
                    "product_master",
                    models.ForeignKey(
                        help_text="Main product this type belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_types",
                        to="products.productmaster",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Type",
                "verbose_name_plural": "Product Types",
                "ordering": ["product_master", "display_order", "type_name"],
                "unique_together": {("product_master", "type_code")},
            },
        ),
        migrations.CreateModel(
            name="ProductItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "basic_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Base price without taxes",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "cgst",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Central GST amount",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "sgst",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="State GST amount",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        editable=False,
                        help_text="Total price including taxes",
                        max_digits=10,
                    ),
                ),
                (
                    "token_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the token/license",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "token_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Token/license cost",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "installing_charges",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Installation charges",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "item_code",
                    models.CharField(
                        help_text="Unique item identifier within the type",
                        max_length=50,
                    ),
                ),
                (
                    "item_name",
                    models.CharField(
                        help_text="Name of the product/service", max_length=255
                    ),
                ),
                (
                    "item_category",
                    models.CharField(
                        choices=[
                            ("product", "Product"),
                            ("service", "Service"),
                            ("upgrade", "Upgrade"),
                            ("plan", "Subscription Plan"),
                            ("addon", "Add-on"),
                        ],
                        default="product",
                        help_text="Category of this item",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Item description", null=True
                    ),
                ),
                (
                    "features",
                    models.TextField(
                        blank=True, help_text="Key features of this item", null=True
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is available"
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Order for display"
                    ),
                ),
                (
                    "billing_cycle",
                    models.CharField(
                        blank=True,
                        default="Billed for 1 Year | Per Device",
                        help_text="Billing frequency and unit",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "old_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Original price before discount",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "team_name",
                    models.CharField(
                        default="For Sales Team",
                        help_text="Team responsible for this item",
                        max_length=255,
                    ),
                ),
                (
                    "product_type",
                    models.ForeignKey(
                        help_text="Product type this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_items",
                        to="products.producttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Item",
                "verbose_name_plural": "Product Items",
                "ordering": ["product_type", "display_order", "item_name"],
                "unique_together": {("product_type", "item_code")},
            },
        ),
        migrations.AddField(
            model_name="productmasterv2",
            name="product_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="products",
                to="products.producttypemaster",
                verbose_name="PrdtTId",
            ),
        ),
        migrations.CreateModel(
            name="QuoteSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("quantity", models.PositiveIntegerField(default=1)),
                ("basic_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "cgst",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "sgst",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "token_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "installing_charges",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("grand_total", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quotes",
                        to="products.customer",
                    ),
                ),
                (
                    "product_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quote_submissions",
                        to="products.productitem",
                    ),
                ),
            ],
            options={"ordering": ["-created_at"],},
        ),
        migrations.CreateModel(
            name="ProductFormSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer_name",
                    models.CharField(max_length=100, verbose_name="Customer Name"),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Company Name",
                    ),
                ),
                (
                    "mobile",
                    models.CharField(max_length=15, verbose_name="Mobile Number"),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="Email ID")),
                (
                    "has_gst",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=3,
                        verbose_name="Has GST",
                    ),
                ),
                (
                    "gst_number",
                    models.CharField(
                        blank=True, max_length=15, null=True, verbose_name="GST Number"
                    ),
                ),
                (
                    "address",
                    models.TextField(blank=True, null=True, verbose_name="Address"),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="State"
                    ),
                ),
                (
                    "district",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="District"
                    ),
                ),
                (
                    "pincode",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="Pincode"
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(default=1, verbose_name="Quantity"),
                ),
                (
                    "basic_amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Basic Amount"
                    ),
                ),
                (
                    "cgst_rate",
                    models.DecimalField(
                        decimal_places=2, max_digits=5, verbose_name="CGST Rate (%)"
                    ),
                ),
                (
                    "sgst_rate",
                    models.DecimalField(
                        decimal_places=2, max_digits=5, verbose_name="SGST Rate (%)"
                    ),
                ),
                (
                    "cgst_amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="CGST Amount"
                    ),
                ),
                (
                    "sgst_amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="SGST Amount"
                    ),
                ),
                (
                    "total_with_gst",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Total with GST"
                    ),
                ),
                (
                    "token_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Token Amount",
                    ),
                ),
                (
                    "installation_charges",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Installation Charges",
                    ),
                ),
                (
                    "grand_total",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Grand Total"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("reviewed", "Reviewed"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("converted", "Converted to Quote"),
                        ],
                        default="new",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(blank=True, null=True, verbose_name="Admin Notes"),
                ),
                (
                    "product_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="form_submissions",
                        to="products.productmasterv2",
                        verbose_name="Selected Product",
                    ),
                ),
                (
                    "quote_reference",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="form_submissions",
                        to="products.quotesubmission",
                        verbose_name="Related Quote",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Form Submission",
                "verbose_name_plural": "Product Form Submissions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("payment_method", models.CharField(max_length=50)),
                (
                    "razorpay_payment_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "razorpay_order_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="products.customer",
                    ),
                ),
                (
                    "quote",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="products.quotesubmission",
                    ),
                ),
            ],
            options={"ordering": ["-created_at"],},
        ),
        migrations.CreateModel(
            name="RateCardEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("rate_date", models.DateField(verbose_name="RateCDate")),
                (
                    "base_amt",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="BaseAmt"
                    ),
                ),
                (
                    "gst_percent",
                    models.DecimalField(
                        decimal_places=2,
                        default=18.0,
                        max_digits=5,
                        verbose_name="GST%",
                    ),
                ),
                (
                    "cgst",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="CGST Amount",
                    ),
                ),
                (
                    "sgst",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="SGST Amount",
                    ),
                ),
                (
                    "nett_amt",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        editable=False,
                        max_digits=10,
                        verbose_name="NettAmt",
                    ),
                ),
                (
                    "token_desc",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Token Description",
                    ),
                ),
                (
                    "token_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Token Amount",
                    ),
                ),
                (
                    "installation_charge",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Installation Charge",
                    ),
                ),
                (
                    "token_gst_percent",
                    models.DecimalField(
                        decimal_places=2,
                        default=18.0,
                        max_digits=5,
                        verbose_name="Token GST%",
                    ),
                ),
                (
                    "token_cgst",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Token CGST",
                    ),
                ),
                (
                    "token_sgst",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Token SGST",
                    ),
                ),
                (
                    "token_total",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        editable=False,
                        max_digits=10,
                        verbose_name="Token Total",
                    ),
                ),
                (
                    "installation_gst_percent",
                    models.DecimalField(
                        decimal_places=2,
                        default=18.0,
                        max_digits=5,
                        verbose_name="Installation GST%",
                    ),
                ),
                (
                    "installation_cgst",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Installation CGST",
                    ),
                ),
                (
                    "installation_sgst",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Installation SGST",
                    ),
                ),
                (
                    "installation_total",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        editable=False,
                        max_digits=10,
                        verbose_name="Installation Total",
                    ),
                ),
                (
                    "t_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        editable=False,
                        max_digits=10,
                        verbose_name="Total Amount",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        help_text="Legacy link to ProductMaster (kept for migration/backward compatibility)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rate_cards_legacy",
                        to="products.productmasterv2",
                        verbose_name="PrdtId",
                    ),
                ),
                (
                    "sub_product",
                    models.ForeignKey(
                        blank=True,
                        db_column="PrdtSubId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rate_cards",
                        to="products.productsubmaster",
                        verbose_name="PrdtSubId",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rate Card",
                "verbose_name_plural": "Rate Cards",
                "db_table": "RateCardMaster",
                "ordering": ["-rate_date", "sub_product__id"],
            },
        ),
        migrations.CreateModel(
            name="RateCardMaster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "rate_code",
                    models.CharField(
                        blank=True,
                        help_text="Optional identifier for this rate card",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "rate_date",
                    models.DateField(help_text="Effective date for this rate"),
                ),
                (
                    "base_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Base amount before GST",
                        max_digits=10,
                    ),
                ),
                (
                    "gst_percent",
                    models.DecimalField(
                        decimal_places=2,
                        default=18.0,
                        help_text="GST percentage to apply (e.g., 18 for 18%)",
                        max_digits=5,
                    ),
                ),
                (
                    "net_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        editable=False,
                        help_text="Computed net amount including GST",
                        max_digits=10,
                    ),
                ),
                (
                    "product_item",
                    models.ForeignKey(
                        help_text="Product that this rate card applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rate_cards",
                        to="products.productitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rate Card",
                "verbose_name_plural": "Rate Cards",
                "ordering": ["-rate_date", "product_item__item_name"],
            },
        ),
        migrations.CreateModel(
            name="Applicant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("reference", models.CharField(max_length=255)),
                ("reference_contact", models.CharField(max_length=15)),
                (
                    "pan_copy",
                    models.FileField(blank=True, null=True, upload_to="uploads/pan/"),
                ),
                (
                    "aadhar_copy",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/aadhar/"
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="uploads/photo/"
                    ),
                ),
                (
                    "gst_certificate",
                    models.FileField(blank=True, null=True, upload_to="uploads/gst/"),
                ),
                (
                    "authorization_letter",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/authorization/"
                    ),
                ),
                (
                    "company_pan",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/company_pan/"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("under_review", "Under Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("admin_notes", models.TextField(blank=True, null=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to="products.customer",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["customer", "created_at"],
                        name="products_ap_custome_6a9580_idx",
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="products_ap_status_6c3c14_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="QuoteRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer_name",
                    models.CharField(max_length=100, verbose_name="Customer Name"),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Company Name",
                    ),
                ),
                (
                    "mobile",
                    models.CharField(max_length=15, verbose_name="Mobile Number"),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="Email ID")),
                (
                    "quantity",
                    models.PositiveIntegerField(default=1, verbose_name="Quantity"),
                ),
                (
                    "address",
                    models.TextField(blank=True, null=True, verbose_name="Address"),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="State"
                    ),
                ),
                (
                    "district",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="District"
                    ),
                ),
                (
                    "pincode",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="Pincode"
                    ),
                ),
                (
                    "gst_number",
                    models.CharField(
                        blank=True, max_length=15, null=True, verbose_name="GST Number"
                    ),
                ),
                (
                    "additional_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="Additional Requirements"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("reviewed", "Reviewed"),
                            ("quoted", "Quoted"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("closed", "Closed"),
                        ],
                        default="new",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(blank=True, null=True, verbose_name="Admin Notes"),
                ),
                (
                    "email_sent",
                    models.BooleanField(default=False, verbose_name="Email Sent"),
                ),
                (
                    "email_sent_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Email Sent At"
                    ),
                ),
                (
                    "product_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quote_requests",
                        to="products.producttypemaster",
                        verbose_name="Product Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Quote Request",
                "verbose_name_plural": "Quote Requests",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["customer_name", "created_at"],
                        name="products_qu_custome_fba465_idx",
                    ),
                    models.Index(
                        fields=["email", "created_at"],
                        name="products_qu_email_00f3f3_idx",
                    ),
                    models.Index(
                        fields=["mobile", "created_at"],
                        name="products_qu_mobile_1b613e_idx",
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="products_qu_status_f94d84_idx",
                    ),
                    models.Index(
                        fields=["product_type", "created_at"],
                        name="products_qu_product_93608c_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="quotesubmission",
            index=models.Index(
                fields=["customer", "created_at"], name="products_qu_custome_463f60_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="quotesubmission",
            index=models.Index(
                fields=["status", "created_at"], name="products_qu_status_ee04f4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productformsubmission",
            index=models.Index(
                fields=["customer_name", "created_at"],
                name="products_pr_custome_0b1ade_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="productformsubmission",
            index=models.Index(
                fields=["email", "created_at"], name="products_pr_email_a02111_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productformsubmission",
            index=models.Index(
                fields=["mobile", "created_at"], name="products_pr_mobile_5dd775_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productformsubmission",
            index=models.Index(
                fields=["status", "created_at"], name="products_pr_status_2032a3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productformsubmission",
            index=models.Index(
                fields=["product_id", "created_at"],
                name="products_pr_product_19e52b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["customer", "created_at"], name="products_pa_custome_94ed8d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["status", "created_at"], name="products_pa_status_42b540_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["razorpay_payment_id"], name="products_pa_razorpa_28a27a_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="ratecardentry",
            constraint=models.UniqueConstraint(
                fields=("sub_product", "rate_date"),
                name="unique_rate_per_product_and_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="ratecardmaster",
            constraint=models.UniqueConstraint(
                fields=("product_item", "rate_date"),
                name="unique_rate_per_item_and_date",
            ),
        ),
    ]
